package com.hshc.ldg.heenoor.demo.design.d1_adapter.blog;

public class Client {

	public static void main(String[] args) {
		//http://blog.csdn.net/jason0539/article/details/22468457
		
		//使用普通功能类
		Target concreteTarget = new ConcreteTarget();
		concreteTarget.request();
		
		//使用特殊功能类
		Target adapter = new Adapter();
		adapter.request();
		
		
		/*从类图中我们也知道需要修改的只不过就是 Adapter 类的内部结构，
		即 Adapter 自身必须先拥有一个被适配类的对象，再把具体的特殊功能委托给这个对象来实现。
		使用对象适配器模式，可以使得 Adapter 类（适配类）根据传入的 Adaptee 对象达到适配多个不同被适配类的功能，
		当然，此时我们可以为多个被适配类提取出一个接口或抽象类。这样看起来的话，似乎对象适配器模式更加灵活一点。
		*/
		
		
//		5. 模式总结
//
//		　　5.1 优点
//
//		　　　　5.1.1 通过适配器，客户端可以调用同一接口，因而对客户端来说是透明的。这样做更简单、更直接、更紧凑。
//
//		　　　　5.1.2 复用了现存的类，解决了现存类和复用环境要求不一致的问题。
//
//		　　　　5.1.3 将目标类和适配者类解耦，通过引入一个适配器类重用现有的适配者类，而无需修改原有代码。
//
//		　　　　5.1.4 一个对象适配器可以把多个不同的适配者类适配到同一个目标，也就是说，同一个适配器可以把适配者类和它的子类都适配到目标接口。
//
//		　　5.2 缺点
//
//		　　　　对于对象适配器来说，更换适配器的实现过程比较复杂。
//
//		　　5.3 适用场景
//
//		　　　　5.3.1 系统需要使用现有的类，而这些类的接口不符合系统的接口。
//
//		　　　　5.3.2 想要建立一个可以重用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。
//
//		　　　　5.3.3 两个类所做的事情相同或相似，但是具有不同接口的时候。
//
//		　　　　5.3.4 旧的系统开发的类已经实现了一些功能，但是客户端却只能以另外接口的形式访问，但我们不希望手动更改原有类的时候。
//
//		　　　　5.3.5 使用第三方组件，组件接口定义和自己定义的不同，不希望修改自己的接口，但是要使用第三方组件接口的功能。
//
//		6. 适配器应用举例
//
//		　　6.1 使用过ADO.NET的开发人员应该都用过DataAdapter，它就是用作DataSet和数据源之间的适配器。DataAdapter通过映射Fill和Update来提供这一适配器。
//
//		　　6.2 手机电源适配器
//
//		作者：jason0539
//
//		微博：http://weibo.com/2553717707
//
//		博客：http://blog.csdn.net/jason0539（转载请说明出处）
	}
}
