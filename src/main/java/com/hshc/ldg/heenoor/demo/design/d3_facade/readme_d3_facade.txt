外观模式
 概述
    为子系统中的一组接口提供一个一致的界面，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
 适用性
    1.当你要为一个复杂子系统提供一个简单接口时。子系统往往因为不断演化而变得越来越
      复杂。大多数模式使用时都会产生更多更小的类。这使得子系统更具可重用性，也更容
      易对子系统进行定制，但这也给那些不需要定制子系统的用户带来一些使用上的困难。
      Facade可以提供一个简单的缺省视图，这一视图对大多数用户来说已经足够，而那些需
      要更多的可定制性的用户可以越过facade层。

    2.客户程序与抽象类的实现部分之间存在着很大的依赖性。引入facade将这个子系统与客
      户以及其他的子系统分离，可以提高子系统的独立性和可移植性。

    3.当你需要构建一个层次结构的子系统时，使用facade模式定义子系统中每层的入口点。
      如果子系统之间是相互依赖的，你可以让它们仅通过facade进行通讯，从而简化了它们
      之间的依赖关系。
			 参与者
    1.Facade
      知道哪些子系统类负责处理请求。
      将客户的请求代理给适当的子系统对象。

    2.Subsystemclasses
      实现子系统的功能。
      处理由Facade对象指派的任务。
      没有facade的任何相关信息；即没有指向facade的指针。
 
//maojd
	医院有挂号，门诊，缴费，取药， 如果病人分别去找，很累，希望有一个 接待员（Facade），可以代替所有的人，病人只找接待员就可以做。
	简单理解： 
		有好多类，客户端要使用一个复杂的功能，需要持有很多对象，调用好多方法。现在使用Facade类持有子系统对象(子系统可以相互调用)。
		客户端只使用Facade就可以完成期望的功能。
	