定义：提供一种方法访问一个容器对象中各个元素，而又不暴露该对象的内部细节。

迭代器模式的结构：
	*抽象容器： 一般是一个借口，提供一个iterator()方法，例如java的Collection接口，List接口，Set接口
	*具体容器：就是抽象容器的具体实现。 不如 ArrayList LinkList，  HashSet
	*抽象迭代器： 定义遍历元素所需要的方法， 一般来说会有这个四个方法：
		取得第一个元素的方法 first() 
		取得下一个元素的方法 next()
		判断是否便利结束的方法 isDone() (或者叫做hasNext()), 	
		移除当前对象的方法remove()
	*迭代器实现：实现迭代器接口中定义的方法，完成集合(抽象容器)的迭代。
	
	
	
迭代器模式的适用场景
	*迭代器模式是与集合共生共死的，一般来说，我们只要实现一个集合，就需要同时提供这个集合的迭代器，
就像java中的Collection，List、Set、Map等，这些集合都有自己的迭代器。
假如我们要实现一个这样的新的容器，当然也需要引入迭代器模式，给我们的容器实现一个迭代器。

	*但是，由于容器与迭代器的关系太密切了，所以大多数语言在实现容器的时候都给提供了迭代器，
并且这些语言提供的容器和迭代器在绝大多数情况下就可以满足我们的需要，
所以现在需要我们自己去实践迭代器模式的场景还是比较少见的，我们只需要使用语言中已有的容器和迭代器就可以了。